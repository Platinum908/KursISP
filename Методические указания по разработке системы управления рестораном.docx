МЕТОДИЧЕСКИЕ УКАЗАНИЯ
по разработке системы управления рестораном

Курсовой проект по дисциплине "Информационные системы и программирование"

1. ОБЩИЕ ПОЛОЖЕНИЯ

1.1. Цель работы
Разработка десктопного приложения для автоматизации процессов управления рестораном с использованием технологии WPF и архитектуры MVVM.

1.2. Задачи работы
- Изучение принципов разработки WPF-приложений
- Освоение паттерна MVVM (Model-View-ViewModel)
- Создание системы управления залами и столами
- Реализация функционала заказов и меню
- Разработка системы бронирования
- Создание отчетности и отслеживания заказов
- Интеграция с базой данных SQL Server

2. ТЕХНИЧЕСКОЕ ЗАДАНИЕ

2.1. Функциональные требования

2.1.1. Управление залами и столами
- Просмотр доступных столов
- Отображение статуса столов (свободен/занят)
- Информация о вместимости столов

2.1.2. Управление меню
- Категории блюд
- Список блюд с ценами
- Возможность добавления/редактирования позиций

2.1.3. Система заказов
- Создание новых заказов
- Добавление блюд в заказ
- Расчет общей стоимости
- Статус заказа (в обработке/готов/выдан)

2.1.4. Система бронирования
- Создание бронирования столов
- Указание даты и времени
- Информация о клиенте

2.1.5. Отчетность
- Ежедневные отчеты
- Статистика по заказам
- Финансовая отчетность

2.1.6. Отслеживание заказов
- Просмотр активных заказов
- Изменение статуса заказов
- История заказов

2.2. Технические требования
- Платформа: .NET 8.0
- UI Framework: WPF
- Архитектура: MVVM
- База данных: SQL Server
- Язык программирования: C#

3. АРХИТЕКТУРА ПРИЛОЖЕНИЯ

3.1. Структура проекта
```
KursProjectISP31/
├── Model/           # Модели данных
├── View/            # Представления (XAML)
├── ViewModel/       # Модели представлений
├── Services/        # Сервисы для работы с БД
├── Utills/          # Утилиты и базовые классы
├── Styles/          # Стили и шаблоны
└── Assets/          # Ресурсы (изображения)
```

3.2. Модели данных (Model)
- Hall - зал ресторана
- RestaurantTable - стол
- MenuCategory - категория меню
- MenuItem - позиция меню
- Order - заказ
- OrderItem - позиция заказа
- Booking - бронирование
- Bill - счет
- DailyReport - ежедневный отчет

3.3. Представления (View)
- MainWindow - главное окно приложения
- TablesView - управление столами
- MenuView - управление меню
- OrderView - создание заказов
- BookingView - система бронирования
- OrderTrackingView - отслеживание заказов
- ReportsView - отчетность

3.4. Модели представлений (ViewModel)
- NavigationViewModel - навигация
- TablesViewModel - логика столов
- MenuViewModel - логика меню
- OrderViewModel - логика заказов
- BookingViewModel - логика бронирования
- OrderTrackingViewModel - логика отслеживания
- ReportsViewModel - логика отчетов

4. РЕАЛИЗАЦИЯ

4.1. Настройка проекта
1. Создать WPF-приложение в Visual Studio
2. Установить пакет Microsoft.Data.SqlClient
3. Настроить структуру папок согласно архитектуре

4.2. Создание моделей данных
Каждая модель должна содержать свойства, соответствующие полям таблицы БД:
```csharp
public class Hall
{
    public int Id { get; set; }
    public string Name { get; set; }
    public int Capacity { get; set; }
}
```

4.3. Реализация сервисов
Создать базовый сервис для работы с БД:
```csharp
public abstract class BaseService
{
    protected readonly string connectionString;
    
    public BaseService()
    {
        connectionString = ConfigurationManager.ConnectionStrings["DBConnection"].ConnectionString;
    }
}
```

4.4. Создание ViewModels
Использовать паттерн MVVM с командой RelayCommand:
```csharp
public class TablesViewModel : ViewModelBase
{
    private ObservableCollection<RestaurantTable> _tables;
    public ObservableCollection<RestaurantTable> Tables
    {
        get => _tables;
        set => SetProperty(ref _tables, value);
    }
    
    public ICommand LoadTablesCommand { get; }
}
```

4.5. Разработка пользовательского интерфейса
- Использовать XAML для описания интерфейса
- Применить стили для единообразного оформления
- Реализовать адаптивный дизайн

5. БАЗА ДАННЫХ

5.1. Структура БД
```sql
CREATE TABLE Halls (
    Id INT PRIMARY KEY IDENTITY(1,1),
    Name NVARCHAR(100) NOT NULL,
    Capacity INT NOT NULL
);

CREATE TABLE RestaurantTables (
    Id INT PRIMARY KEY IDENTITY(1,1),
    TableNumber INT NOT NULL,
    HallId INT FOREIGN KEY REFERENCES Halls(Id),
    Capacity INT NOT NULL,
    IsOccupied BIT DEFAULT 0
);

-- Остальные таблицы...
```

5.2. Подключение к БД
Настроить строку подключения в App.config:
```xml
<connectionStrings>
    <add name="DBConnection" 
         connectionString="Data Source=localhost;Initial Catalog=Restaurant;Integrated Security=True;Encrypt=False"/>
</connectionStrings>
```

6. ТЕСТИРОВАНИЕ

6.1. Функциональное тестирование
- Проверка создания заказов
- Тестирование системы бронирования
- Валидация отчетов

6.2. Тестирование интерфейса
- Проверка навигации между страницами
- Тестирование отзывчивости интерфейса
- Валидация ввода данных

7. ДОКУМЕНТИРОВАНИЕ

7.1. Код должен содержать комментарии
7.2. Создать README.md с инструкциями по установке
7.3. Описать архитектуру и принципы работы

8. ТРЕБОВАНИЯ К ОФОРМЛЕНИЮ

8.1. Структура проекта должна соответствовать архитектуре MVVM
8.2. Код должен быть читаемым и хорошо документированным
8.3. Интерфейс должен быть интуитивно понятным
8.4. Приложение должно корректно обрабатывать ошибки

9. КРИТЕРИИ ОЦЕНКИ

9.1. Функциональность (40%)
- Реализация всех требуемых функций
- Корректная работа с БД
- Обработка ошибок

9.2. Архитектура (30%)
- Соблюдение паттерна MVVM
- Чистота кода
- Структура проекта

9.3. Интерфейс (20%)
- Удобство использования
- Современный дизайн
- Отзывчивость

9.4. Документация (10%)
- Качество комментариев
- Наличие README
- Описание архитектуры

10. ЗАКЛЮЧЕНИЕ

Данная методичка описывает процесс разработки системы управления рестораном с использованием современных технологий и паттернов проектирования. Следование указанным принципам обеспечит создание качественного, масштабируемого и поддерживаемого приложения.

Приложение должно демонстрировать понимание принципов ООП, паттернов проектирования и современных подходов к разработке пользовательских интерфейсов. 